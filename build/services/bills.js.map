{"version":3,"sources":["../../src/services/bills.js"],"names":["cnpj","userRepository","findUserById","data","user","getUser","BillsService","billsRepository","id","skip","limit","getAllBills","bills","length","Response","Created","Error","mountError","console","error","message","paidOut","getBillsByStatusOfPayment","body","mountBillToUser","existsUser","mountErrorExistsUser","createUnpaidBill","result","sendedToUser","sended","notSended","forEach","bill","addBillToUser","push","mountDontSendedBill","mountErrorNotExistsBills","code","name","description","storeCnpj","storeFantasyName","discount","purchaseDate","Date","amount","billetInfo","billet","value","paymentSlip","bankName","undefined","reason","mountBodyToModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;uFAyFA,kBAAuBA,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACe,KAAKC,cAAL,CAAoBC,YAApB,CAAiCC,KAAKC,IAAtC,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,O;;;;;AAzFf;;;;IAEMC,Y;AACJ,wBAAYC,eAAZ,EAA6BN,cAA7B,EAA6C;AAAA;;AAC3C,SAAKM,eAAL,GAAuBA,eAAvB;AACA,SAAKN,cAAL,GAAsBA,cAAtB;AACD;;;;;2GAEiBO,E,EAAIC,I,EAAMC,K;;;;;;;;uBAEJ,KAAKH,eAAL,CAAqBI,WAArB,CAAiCH,EAAjC,EAAqCC,IAArC,EAA2CC,KAA3C,C;;;AAAdE,qB;;sBAEFA,MAAMC,MAAN,GAAe,C;;;;;iDACVC,kBAASC,OAAT,CAAiBH,KAAjB,EAAwB,oBAAxB,C;;;iDAEAE,kBAASE,KAAT,CAAeC,YAAf,C;;;;;;;;;;AAGTC,wBAAQC,KAAR,mCAA8C,YAAMC,OAApD;iDACON,kBAASE,KAAT,a;;;;;;;;;;;;;;;;;;;6GAIqBZ,I,EAAMiB,O,EAASZ,I,EAAMC,K;;;;;;;;uBAE7B,KAAKH,eAAL,CAAqBe,yBAArB,CAA+ClB,IAA/C,EAAqDiB,OAArD,EAA8DZ,IAA9D,EAAoEC,KAApE,C;;;AAAdE,qB;;sBAEFA,MAAMC,MAAN,GAAe,C;;;;;kDACVC,kBAASC,OAAT,CAAiBH,KAAjB,EAAwB,oBAAxB,C;;;kDAEAE,kBAASE,KAAT,CAAeC,YAAf,C;;;;;;;;;;AAGTC,wBAAQC,KAAR,iDAA4D,aAAMC,OAAlE;kDACON,kBAASE,KAAT,c;;;;;;;;;;;;;;;;;;;6GAIYO,I;;;;;;;;AAEbpB,qB,GAAOqB,gBAAgBD,IAAhB,C;;uBAEY,KAAKtB,cAAL,CAAoBC,YAApB,CAAiCC,MAAKC,IAAtC,C;;;AAAnBqB,0B;;sBAEFA,WAAWZ,MAAX,IAAqB,C;;;;;kDAChBC,kBAASE,KAAT,CAAeU,sBAAf,C;;;;uBAEY,KAAKnB,eAAL,CAAqBoB,gBAArB,CAAsCxB,KAAtC,C;;;AAAfyB,uB;kDAECd,kBAASC,OAAT,CAAiBa,OAAjB,EAAyB,8BAAzB,C;;;;;;AAEPV,wBAAQC,KAAR,wCAAmD,aAAMC,OAAzD;kDACON,kBAASE,KAAT,c;;;;;;;;;;;;;;;;;;;6GAIWO,I;;;;;;;;;AAEdM,4B,GAAe;AACjBC,0BAAQ,EADS;AAEjBC,6BAAW;AAFM,iB;;sBAKfR,KAAKV,MAAL,GAAc,C;;;;;AAChBU,qBAAKS,OAAL;AAAA,uGAAa,kBAAMC,IAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACc5B,QAAQ4B,KAAKjC,IAAb,CADd;;AAAA;AACLyB,sCADK;;AAAA,kCAGPA,WAAWZ,MAAX,GAAoB,CAHb;AAAA;AAAA;AAAA;;AAILoB,iCAJK,GAIET,gBAAgBS,KAAhB,EAAsBR,WAAW,CAAX,EAAcjB,EAApC,CAJF;AAAA,2CAKTqB,aAAaC,MALJ;AAAA;AAAA,mCAKsB,MAAKvB,eAAL,CAAqB2B,aAArB,CAAmCD,KAAnC,CALtB;;AAAA;AAAA;;AAAA,yCAKWE,IALX;;AAAA;AAAA;;AAAA;AAQTN,yCAAaC,MAAb,CAAoBK,IAApB,CAAyBC,oBAAoBH,IAApB,CAAzB;;AARS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAb;;AAAA;AAAA;AAAA;AAAA;;kDAYOnB,kBAASC,OAAT,CAAiBc,YAAjB,EAA+B,sCAA/B,C;;;kDAGAf,kBAASE,KAAT,CAAeqB,0BAAf,C;;;;;;;;;;AAITnB,wBAAQC,KAAR,0CAAqD,aAAMC,OAA3D;kDACON,kBAASE,KAAT,c;;;;;;;;;;;;;;;;;;;;AASb,SAASqB,wBAAT,GAAoC;AAClC,SAAO;AACLC,UAAM,GADD;AAELlB,aAAS;AAFJ,GAAP;AAID;;AAED,SAASI,eAAT,CAAyBrB,IAAzB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIwB,SAAS;AACXxB,UAAMA,OAAOA,IAAP,GAAcD,KAAKC,IADd;AAEXmC,UAAMpC,KAAKoC,IAFA;AAGXC,iBAAarC,KAAKqC,WAHP;AAIXC,eAAWtC,KAAKsC,SAJL;AAKXC,sBAAkBvC,KAAKuC,gBALZ;AAMXC,cAAUxC,KAAKwC,QANJ;AAOXC,kBAAcC,KAAK1C,KAAKyC,YAAV,CAPH;AAQXE,YAAQ3C,KAAK2C,MARF;AASXC,gBAAY;AACVC,cAAQ7C,KAAK4C,UAAL,CAAgBC,MADd;AAEVV,YAAMnC,KAAK4C,UAAL,CAAgBT,IAFZ;AAGVW,aAAO9C,KAAK4C,UAAL,CAAgBE,KAHb;AAIVC,mBAAa/C,KAAK4C,UAAL,CAAgBG,WAJnB;AAKVC,gBAAUhD,KAAK4C,UAAL,CAAgBI;AALhB;AATD,GAAb;;AAkBA,MAAI,CAACvB,OAAOe,QAAR,IAAoBf,OAAOe,QAAP,IAAmB,IAAvC,IAA+Cf,OAAOe,QAAP,IAAmBS,SAAtE,EACE,OAAOxB,OAAOe,QAAd;;AAEF,MAAI,CAACf,OAAOmB,UAAR,IAAsBnB,OAAOmB,UAAP,IAAqB,IAA3C,IAAmDnB,OAAOmB,UAAP,IAAqBK,SAA5E,EACE,OAAOxB,OAAOmB,UAAd;;AAEF,SAAOnB,MAAP;AACD;;AAED,SAASQ,mBAAT,CAA6BH,IAA7B,EAAmC;AACjC,SAAOL,SAAS;AACdU,UAAML,KAAKc,UAAL,CAAgBT,IADR;AAEdlC,UAAMA,IAFQ;AAGdiD,YAAQ;AAHM,GAAhB;AAKD;;AAED,SAASC,gBAAT,CAA0BnD,IAA1B,EAAgC;AAC9B,MAAIyB,SAAS;AACXxB,UAAMD,KAAKC,IADA;AAEXmC,UAAMpC,KAAKoC,IAFA;AAGXC,iBAAarC,KAAKqC,WAHP;AAIXM,YAAQ3C,KAAK2C,MAJF;AAKXH,cAAUxC,KAAKwC;AALJ,GAAb;;AAQA,MAAI,CAACf,OAAOe,QAAR,IAAoBf,OAAOe,QAAP,IAAmB,IAAvC,IAA+Cf,OAAOe,QAAP,IAAmBS,SAAtE,EACE,OAAOxB,OAAOe,QAAd;;AAEF,MAAI,CAACf,OAAOY,WAAR,IAAuBZ,OAAOY,WAAP,IAAsB,IAA7C,IAAqDZ,OAAOY,WAAP,IAAsBY,SAA/E,EACE,OAAOxB,OAAOY,WAAd;;AAEF,SAAOZ,MAAP;AACD;;AAED,SAASF,oBAAT,GAAgC;AAC9B,SAAO;AACLY,UAAM,GADD;AAELlB,aAAS;AAFJ,GAAP;AAID;;AAED,SAASH,UAAT,GAAsB;AACpB,SAAO;AACLqB,UAAM,GADD;AAELlB,aAAS;AAFJ,GAAP;AAID;;kBAEcd,Y","file":"bills.js","sourcesContent":["import { Response } from '../helpers'\r\n\r\nclass BillsService {\r\n  constructor(billsRepository, userRepository) {\r\n    this.billsRepository = billsRepository\r\n    this.userRepository = userRepository\r\n  }\r\n\r\n  async getAllBills(id, skip, limit) {\r\n    try {\r\n      const bills = await this.billsRepository.getAllBills(id, skip, limit)\r\n\r\n      if (bills.length > 0)\r\n        return Response.Created(bills, 'Contas cadastradas')\r\n      else\r\n        return Response.Error(mountError())\r\n    }\r\n    catch (error) {\r\n      console.error(`[BillsService - getAllBills] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async getBillsByStatusOfPayment(user, paidOut, skip, limit) {\r\n    try {\r\n      const bills = await this.billsRepository.getBillsByStatusOfPayment(user, paidOut, skip, limit)\r\n\r\n      if (bills.length > 0)\r\n        return Response.Created(bills, 'Contas cadastradas')\r\n      else\r\n        return Response.Error(mountError())\r\n    }\r\n    catch (error) {\r\n      console.error(`[BillsService - getBillsByStatusOfPayment] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async createUnpaidBill(body) {\r\n    try {\r\n      const data = mountBillToUser(body)\r\n\r\n      const existsUser = await this.userRepository.findUserById(data.user)\r\n\r\n      if (existsUser.length == 0)\r\n        return Response.Error(mountErrorExistsUser())\r\n\r\n      const result = await this.billsRepository.createUnpaidBill(data)\r\n\r\n      return Response.Created(result, 'Conta cadastrada com sucesso')\r\n    } catch (error) {\r\n      console.error(`[BillsService - createUnpaidBill] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async sendBillsToUser(body) {\r\n    try {\r\n      let sendedToUser = {\r\n        sended: [],\r\n        notSended: []\r\n      }\r\n\r\n      if (body.length > 0) {\r\n        body.forEach(async bill => {\r\n          const existsUser = await getUser(bill.cnpj)\r\n\r\n          if (existsUser.length > 0) {\r\n            let bill = mountBillToUser(bill, existsUser[0].id)\r\n            sendedToUser.sended.push(await this.billsRepository.addBillToUser(bill))\r\n          }\r\n          else {\r\n            sendedToUser.sended.push(mountDontSendedBill(bill))\r\n          }\r\n        })\r\n\r\n        return Response.Created(sendedToUser, 'Contas enviadas aos seus respectivos')\r\n      }\r\n      else {\r\n        return Response.Error(mountErrorNotExistsBills())\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.error(`[PaymentsService - sendBillsToUser] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n}\r\n\r\nasync function getUser(cnpj) {\r\n  return await this.userRepository.findUserById(data.user)\r\n}\r\n\r\nfunction mountErrorNotExistsBills() {\r\n  return {\r\n    code: 400,\r\n    message: 'Nenhuma conta foi enviada'\r\n  }\r\n}\r\n\r\nfunction mountBillToUser(data, user) {\r\n  let result = {\r\n    user: user ? user : data.user,\r\n    name: data.name,\r\n    description: data.description,\r\n    storeCnpj: data.storeCnpj,\r\n    storeFantasyName: data.storeFantasyName,\r\n    discount: data.discount,\r\n    purchaseDate: Date(data.purchaseDate),\r\n    amount: data.amount,\r\n    billetInfo: {\r\n      billet: data.billetInfo.billet,\r\n      code: data.billetInfo.code,\r\n      value: data.billetInfo.value,\r\n      paymentSlip: data.billetInfo.paymentSlip,\r\n      bankName: data.billetInfo.bankName\r\n    },\r\n  }\r\n\r\n  if (!result.discount || result.discount == null || result.discount == undefined)\r\n    delete result.discount\r\n\r\n  if (!result.billetInfo || result.billetInfo == null || result.billetInfo == undefined)\r\n    delete result.billetInfo\r\n\r\n  return result\r\n}\r\n\r\nfunction mountDontSendedBill(bill) {\r\n  return result = {\r\n    code: bill.billetInfo.code,\r\n    user: user,\r\n    reason: 'Usuário não cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountBodyToModel(data) {\r\n  let result = {\r\n    user: data.user,\r\n    name: data.name,\r\n    description: data.description,\r\n    amount: data.amount,\r\n    discount: data.discount,\r\n  }\r\n\r\n  if (!result.discount || result.discount == null || result.discount == undefined)\r\n    delete result.discount\r\n\r\n  if (!result.description || result.description == null || result.description == undefined)\r\n    delete result.description\r\n\r\n  return result\r\n}\r\n\r\nfunction mountErrorExistsUser() {\r\n  return {\r\n    code: 400,\r\n    message: 'Usuário não está cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountError() {\r\n  return {\r\n    code: 404,\r\n    message: 'Nenhuma conta cadastrada'\r\n  }\r\n}\r\n\r\nexport default BillsService\r\n"]}