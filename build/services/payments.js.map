{"version":3,"sources":["../../src/services/payments.js"],"names":["PaymentsService","paymentRepository","userRepository","billsRepository","body","findById","user","existUser","length","Response","Error","mountErrorNotExistsUser","findBillsToPay","bills","mountErrorNotExistBills","model","mountModelToPaymentsToBankCard","createPayments","result","forEach","b","editPaidBillsByCode","Created","console","error","message","totalBills","sumTotalBills","depositedMoney","mountErrorDontHaveCashToPayBills","mountModelToPayments","removeCash","billetInfo","billet","code","value","purchaseInterest","interestFrom","paidWithBillet","amount","cashback","paidOut","paidOutDate","Date","now","bankCard","paidWithBankCard","total"],"mappings":"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","file":"payments.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport { Response } from '../helpers'\r\n\r\nclass PaymentsService {\r\n  constructor (paymentRepository, userRepository, billsRepository) {\r\n    this.paymentRepository = paymentRepository\r\n    this.userRepository = userRepository\r\n    this.billsRepository = billsRepository\r\n  }\r\n\r\n  async payBillsByBankCard(body) {\r\n    try {\r\n      let existUser = await this.userRepository.findById(body.user)\r\n\r\n      if (existUser.length == 0)\r\n        return Response.Error(mountErrorNotExistsUser())\r\n\r\n      let bills = await this.billsRepository.findBillsToPay(body.user, body.bills)\r\n\r\n      if (bills.length == 0)\r\n        return Response.Error(mountErrorNotExistBills())\r\n\r\n\r\n      let model = mountModelToPaymentsToBankCard(body)  \r\n      const result = await this.paymentRepository.createPayments(model)\r\n\r\n      bills.forEach(async b => {\r\n        await this.billsRepository.editPaidBillsByCode(b)\r\n      })\r\n  \r\n      return Response.Created(result, 'Conta paga com sucesso')\r\n    }\r\n    catch (error) {\r\n      console.error(`[PaymentsService - payBillsByBankCard] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async payBillsByBillet(body) {\r\n    try {\r\n      let existUser = await this.userRepository.findById(body.user)\r\n\r\n      if (existUser.length == 0)\r\n        return Response.Error(mountErrorNotExistsUser())\r\n\r\n      let bills = await this.billsRepository.findBillsToPay(body.user, body.bills)\r\n\r\n      if (bills.length == 0)\r\n        return Response.Error(mountErrorNotExistBills())\r\n\r\n      let totalBills  = sumTotalBills(bills)\r\n\r\n      if (totalBills > depositedMoney)\r\n        return Response.Error(mountErrorDontHaveCashToPayBills())\r\n\r\n      let model = mountModelToPayments(body)  \r\n      const result = await this.paymentRepository.createPayments(model)\r\n\r\n      await this.userRepository.removeCash(body.user, totalBills)\r\n\r\n      bills.forEach(async b => {\r\n        await this.billsRepository.editPaidBillsByCode(b)\r\n      })\r\n  \r\n      return Response.Created(result, 'Conta paga com sucesso')\r\n    }\r\n    catch (error) {\r\n      console.error(`[PaymentsService - payBillsByBillet] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n}\r\n\r\nfunction mountModelToPaymentsToBankCard(body) {\r\n  return {\r\n    user: body.user,\r\n    bills: body.bills,\r\n    billetInfo: { \r\n      billet: body.billetInfo.billet,\r\n      code: body.billetInfo.code,\r\n      value: body.billetInfo.value,\r\n      purchaseInterest: body.billetInfo.purchaseInterest,\r\n      interestFrom: body.billetInfo.interestFrom,\r\n      paidWithBillet: true\r\n    },\r\n    amount: body.amount,\r\n    cashback: body.cashback,\r\n    paidOut: true,\r\n    paidOutDate: Date.now,\r\n  }\r\n}\r\n\r\nfunction mountModelToPayments(body) {\r\n  return {\r\n    user: body.user,\r\n    bills: body.bills,\r\n    bankCard: { \r\n      value: body.bankCard.value,\r\n      purchaseInterest: body.bankCard.purchaseInterest,\r\n      interestFrom: body.bankCard.interestFrom,\r\n      paidWithBankCard: true\r\n    },\r\n    amount: body.amount,\r\n    cashback: body.cashback,\r\n    paidOut: true,\r\n    paidOutDate: Date.now,\r\n  }\r\n}\r\n\r\nfunction sumTotalBills(bills) {\r\n  let total = 0\r\n  bills.forEach(b => {\r\n    total += b.amount\r\n  })\r\n\r\n  return total\r\n}\r\n\r\nfunction mountErrorDontHaveCashToPayBills() {\r\n  return {\r\n    code: 40,\r\n    message: 'Dinheiro insuficiente'\r\n  }\r\n}\r\n\r\n\r\nfunction mountErrorNotExistsUser() {\r\n  return {\r\n    code: 404,\r\n    message: 'Usuário não cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountErrorNotExistBills() {\r\n  return {\r\n    code: 404,\r\n    message: 'Contas não cadastradas para esse usuário'\r\n  }\r\n}\r\n\r\nexport default PaymentsService"]}