{"version":3,"sources":["../../src/services/user.js"],"names":["UserService","userRepository","email","password","Response","Error","mountErrorInvalidEmail","login","existsUser","length","Created","logado","user","mountErrorWrongPassword","body","data","mountBodyToModel","findUserByEmail","mountErrorExistsUser","sign","result","console","error","message","mountBodyToModelBankCard","findUserById","id","existsCard","bankCardExists","bankCards","cardNumber","mountErrorExistsCard","push","addBankCard","mountErrorNotExistsUser","deleteBankCard","amount","total","depositedMoney","removeCash","code","forEach","element","card","mongoose","mongo","ObjectId","name","bankName","flag","dueDate","securityNumber","cpf","birthday","Date","motherName","image","address","zipcode","street","neighborhood","number","complement","undefined"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport { Response, EmailValidator } from '../helpers'\r\n\r\nclass UserService {\r\n  constructor(userRepository) {\r\n    this.userRepository = userRepository\r\n  }\r\n\r\n  async login(email, password) {\r\n    if (!EmailValidator(email))\r\n      return Response.Error(mountErrorInvalidEmail())\r\n\r\n    const existsUser = await this.userRepository.login(email, password)\r\n\r\n    if (existsUser.length > 0)\r\n      return Response.Created({ logado: true, user: existsUser }, 'Usuário logado com sucesso')\r\n    else\r\n      return Response.Error(mountErrorWrongPassword())\r\n  }\r\n\r\n  async sign(body) {\r\n    try {\r\n      const data = mountBodyToModel(body)\r\n\r\n      const existsUser = await this.userRepository.findUserByEmail(data.email)\r\n\r\n      if (existsUser.length > 0)\r\n        return Response.Error(mountErrorExistsUser())\r\n\r\n      const result = await this.userRepository.sign(data)\r\n\r\n      return Response.Created(existsUser, 'Usuário cadastrado com sucesso')\r\n    } catch (error) {\r\n      console.error(`[UserService - sign] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async addBankCard(body) {\r\n    try {\r\n      const data = mountBodyToModelBankCard(body)\r\n\r\n      const existsUser = await this.userRepository.findUserById(body.id)\r\n\r\n      if (existsUser.length > 0) {\r\n        let existsCard = bankCardExists(existsUser.bankCards, data.cardNumber)\r\n\r\n        if (existsCard)\r\n          return Response.Error(mountErrorExistsCard())\r\n\r\n        existsUser.bankCards.push(data)\r\n        const result = await this.userRepository.addBankCard(existsUser, body.id)\r\n\r\n        return Response.Created(result, 'Cartão cadastrado com sucesso')\r\n      }\r\n      else {\r\n        return Response.Error(mountErrorNotExistsUser())\r\n      }\r\n    } catch (error) {\r\n      console.error(`[UserService - addBankCard] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async deleteBankCard(user, id) {\r\n    try {\r\n      const existsUser = await this.userRepository.findUserById(user)\r\n\r\n      if (existsUser.length > 0) {\r\n        const result = await this.userRepository.deleteBankCard(id)\r\n\r\n        return Response.Created(result, 'Cartão deletado com sucesso')\r\n      }\r\n      else {\r\n        return Response.Error(mountErrorNotExistsUser())\r\n      }\r\n    } catch (error) {\r\n      console.error(`[UserService - addBankCard] ${error.message}`)\r\n      return Response.Error(error)\r\n    }\r\n  }\r\n\r\n  async editDepositedCash(id, amount) {\r\n    try {\r\n      const existsUser = await this.userRepository.findUserById(id)\r\n\r\n      if (existsUser.length > 0) {\r\n        const total = existsUser[0].depositedMoney + amount\r\n        const result = await this.userRepository.removeCash(id, total)\r\n        return Response.Created(result, 'Depósito adicionado com sucesso')\r\n      }\r\n      else {\r\n        return Response.Error(mountErrorNotExistsUser())\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.error(`[UserService - getDepositedCash] ${error.message}`)\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\nfunction mountErrorExistsCard() {\r\n  return {\r\n    code: 400,\r\n    message: 'Cartão já cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountErrorNotExistsUser() {\r\n  return {\r\n    code: 404,\r\n    message: 'Usuário não cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountErrorExistsUser() {\r\n  return {\r\n    code: 400,\r\n    message: 'Usuário já cadastrado'\r\n  }\r\n}\r\n\r\nfunction mountErrorWrongPassword() {\r\n  return {\r\n    code: 400,\r\n    message: 'Email/Senha inválida'\r\n  }\r\n}\r\n\r\nfunction mountErrorInvalidEmail() {\r\n  return {\r\n    code: 400,\r\n    message: 'Email inváldio'\r\n  }\r\n}\r\n\r\nfunction bankCardExists(bankCards, cardNumber) {\r\n  if (bankCards.length == 0)\r\n    return false\r\n\r\n  bankCards.forEach(element => {\r\n    if (element.cardNumber === cardNumber)\r\n      return true\r\n  });\r\n}\r\n\r\nfunction mountBodyToModelBankCard(data) {\r\n  return {\r\n    card: new mongoose.mongo.ObjectId(),\r\n    name: data.name,\r\n    bankName: data.bankName,\r\n    cardNumber: data.cardNumber,\r\n    flag: data.flag,\r\n    dueDate: data.dueDate,\r\n    securityNumber: data.securityNumber\r\n  }\r\n}\r\n\r\nfunction mountBodyToModel(data) {\r\n  let result = {\r\n    name: data.name,\r\n    cpf: data.cpf,\r\n    email: data.email,\r\n    password: data.password,\r\n    birthday: Date(data.birthday),\r\n    motherName: data.motherName,\r\n    image: data.image,\r\n    address: {\r\n      zipcode: data.address.zipcode,\r\n      street: data.address.street,\r\n      neighborhood: data.address.neighborhood,\r\n      number: data.address.number,\r\n      complement: data.address.complement\r\n    },\r\n  }\r\n\r\n  if (!result.image || result.image == null || result.image == undefined)\r\n    delete result.image\r\n\r\n  return result\r\n}\r\n\r\nexport default UserService\r\n"]}