{"version":3,"sources":["../../src/repositories/user.js"],"names":["ObjectId","mongoose","Types","UserRepository","schema","model","data","create","response","console","error","message","email","password","find","id","_id","cpf","update","cardId","total","depositedMoney"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,WAAWC,mBAASC,KAAT,CAAeF,QAAhC;;IACMG,c;AACJ,4BAAe;AAAA;;AACb,SAAKC,MAAL,GAAc,IAAIH,mBAASI,KAAb,CAAmB,OAAnB,CAAd;AACD;;;;;2GAEWC,I;;;;;;;AAEFD,qB,GAAQ,IAAI,KAAKD,MAAT,CAAgBE,IAAhB,C;;uBAES,KAAKF,MAAL,CAAYG,MAAZ,CAAmBF,KAAnB,C;;;AAAjBG,wB;iDAECA,Q;;;;;;AAEPC,wBAAQC,KAAR,8BAAyC,YAAIC,OAA7C;;;;;;;;;;;;;;;;;;;;6GAKSC,K,EAAOC,Q;;;;;;;;uBAEO,KAAKT,MAAL,CAAYU,IAAZ,CAAiB,EAAEF,YAAF,EAASC,kBAAT,EAAjB,C;;;AAAjBL,wB;kDAECA,Q;;;;;;AAEPC,wBAAQC,KAAR,+BAA0C,aAAIC,OAA9C;;;;;;;;;;;;;;;;;;;;6GAKkBC,K;;;;;;;;uBAEK,KAAKR,MAAL,CAAYU,IAAZ,CAAiB,EAAEF,YAAF,EAAjB,C;;;AAAjBJ,wB;kDAECA,Q;;;;;;AAEPC,wBAAQC,KAAR,yCAAoD,aAAIC,OAAxD;;;;;;;;;;;;;;;;;;;;6GAKeI,E;;;;;;;;uBAEQ,KAAKX,MAAL,CAAYU,IAAZ,CAAiB,EAAEE,KAAKhB,SAASe,EAAT,CAAP,EAAjB,C;;;AAAjBP,wB;kDAECA,Q;;;;;;AAEPC,wBAAQC,KAAR,yCAAoD,aAAIC,OAAxD;;;;;;;;;;;;;;;;;;;;6GAKgBM,G;;;;;;;;uBAEO,KAAKb,MAAL,CAAYU,IAAZ,CAAiB,EAAEG,QAAF,EAAjB,C;;;AAAjBT,wB;kDAECA,Q;;;;;;AAEPC,wBAAQC,KAAR,yCAAoD,aAAIC,OAAxD;;;;;;;;;;;;;;;;;;;;6GAKcL,I,EAAMS,E;;;;;;;;uBAEG,KAAKX,MAAL,CAAYc,MAAZ,CAAmB,EAAEF,KAAKhB,SAASe,EAAT,CAAP,EAAnB,EAAyCT,IAAzC,C;;;AAAjBE,wB;kDAECA,Q;;;;;;AAGPC,wBAAQC,KAAR,qCAAgD,aAAIC,OAApD;;;;;;;;;;;;;;;;;;;;6GAKiBQ,M,EAAQJ,E;;;;;;;;uBAEF,KAAKX,MAAL,CAAYc,MAAZ,CAAmB,EAAEF,KAAKD,EAAP,EAAnB,EAA+B,EAAE,SAAS,EAAEI,cAAF,EAAX,EAA/B,C;;;AAAjBX,wB;kDAECA,Q;;;;;;AAGPC,wBAAQC,KAAR,qCAAgD,aAAIC,OAApD;;;;;;;;;;;;;;;;;;;;6GAKaI,E,EAAIK,K;;;;;;;;uBAEM,KAAKhB,MAAL,CAAYc,MAAZ,CAAmB,EAAEF,KAAKD,EAAP,EAAnB,EAA+B,EAAEM,gBAAgBD,KAAlB,EAA/B,C;;;AAAjBZ,wB;kDAECA,Q;;;;;;AAGPC,wBAAQC,KAAR,qCAAgD,aAAIC,OAApD;;;;;;;;;;;;;;;;;;;;;kBAMSR,c","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport UserSchema from '../schemas'\r\nconst ObjectId = mongoose.Types.ObjectId\r\nclass UserRepository {\r\n  constructor () {\r\n    this.schema = new mongoose.model('users')\r\n  }\r\n\r\n  async sign (data) {\r\n    try {\r\n      const model = new this.schema(data)\r\n\r\n      const response = await this.schema.create(model)\r\n\r\n      return response\r\n    } catch (err) {\r\n      console.error(`[UserRepository - sign] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async login (email, password) {\r\n    try {\r\n      const response = await this.schema.find({ email, password })\r\n      \r\n      return response\r\n    } catch (err) {\r\n      console.error(`[UserRepository - login] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async findUserByEmail(email) {\r\n    try {\r\n      const response = await this.schema.find({ email })\r\n      \r\n      return response\r\n    } catch (err) {\r\n      console.error(`[UserRepository - findUserByEmail] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async findUserById(id) {\r\n    try {\r\n      const response = await this.schema.find({ _id: ObjectId(id) })\r\n      \r\n      return response\r\n    } catch (err) {\r\n      console.error(`[UserRepository - findUserByEmail] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async findUserByCpf(cpf) {\r\n    try {\r\n      const response = await this.schema.find({ cpf })\r\n      \r\n      return response\r\n    } catch (err) {\r\n      console.error(`[UserRepository - findUserByEmail] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async addBankCard(data, id) {\r\n    try {\r\n      const response = await this.schema.update({ _id: ObjectId(id)}, data)\r\n\r\n      return response\r\n    }\r\n    catch (err) {\r\n      console.error(`[UserRepository - addBankCard] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async deleteBankCard(cardId, id) {\r\n    try {\r\n      const response = await this.schema.update({ _id: id}, { '$pull': { cardId }})\r\n\r\n      return response\r\n    }\r\n    catch (err) {\r\n      console.error(`[UserRepository - addBankCard] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n\r\n  async removeCash(id, total) {\r\n    try {\r\n      const response = await this.schema.update({ _id: id}, { depositedMoney: total })\r\n\r\n      return response\r\n    }\r\n    catch (err) {\r\n      console.error(`[UserRepository - addBankCard] ${err.message}`)\r\n      return err\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserRepository\r\n"]}